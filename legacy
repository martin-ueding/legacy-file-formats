#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Ueding <dev@martin-ueding.de>

import optparse
import os

# Dict of file extensions that should be checked. The full name is also there,
# but currently not used.
patterns = {
    "cdr": "Corel Draw",
    "doc": "Microsoft Word",
    "docx": "Microsoft Word",
    "indd": "Adobe InDesign",
    "key": "Apple Keynote",
    "mindnode": "Mindnode Mindmap",
    "mw": "Maple Worksheet",
    "nb": "Mathematica Notebook",
    "numbers": "Apple Numbers",
    "odg": "OpenOffice Draw",
    "odp": "OpenOffice Impress",
    "ods": "OpenOffice Calc",
    "odt": "OpenOffice Writer",
    "pages": "Apple Pages",
    "ppsx": "Microsoft PowerPoint",
    "ppt": "Microsoft PowerPoint",
    "ppts": "Microsoft PowerPoint",
    "pptx": "Microsoft PowerPoint",
    "psd": "Adobe Photoshop",
    "rtfd": "Rich Text Format Directory",
    "webarchive": "Safari Web Archive",
    "xls": "Microsoft Excel",
    "xlsx": "Microsoft Excel",
    "xoj": "Xournal"
}


def main():
    parser = optparse.OptionParser(usage="legacy [paths...]", description="Checks for proprietary or legacy file formats that do not have a PDF exported.")
    parser.add_option("--suffix", dest="suffix", default="pdf", help="Additional suffix to check for. [default %default]")
    parser.add_option("--stat", dest="stat", action="store_true", default=False, help="Print file type summary. [default %default]")
    parser.add_option("--time", dest="time", action="store_true", default=False, help="Check that PDF is newer than other file. [default %default]")

    (options, args) = parser.parse_args()
    del parser

    options.suffix = options.suffix.lower()

    # If no directory was given on the command line, use the current working
    # directory.
    if len(args) == 0:
        args.append(".")

    counts = {}

    # Iterate through all given folders.
    for arg in args:
        if os.path.isdir(arg):
            os.path.walk(arg, checkfolder, (options, counts))

    # Print the summary if desired.
    if options.stat:
        print_summary(counts)


def checkfolder(args, dirname, names):
    """
    Checks a folder for files that lack an export.

    In case `file.old` does not have a `file.old.pdf`, a `file.pdf` is checked
    alternatively. It the latter is found, it is moved to `file.old.pdf` to
    show that it is just an export of the original file, not a file on its own.
    """

    options, counts = args

    names.sort()

    # Iterate thorugh all the files and folders.
    for name in names:
        for pattern in patterns:
            if name.lower().endswith("."+pattern):
                # This is the standard PDF file name.
                pdffile = dirname+"/"+name+"."+options.suffix

                is_invalid = True

                # Check whether the file has the same name, but just a PDF
                # extension.  Rename the file then.
                if not os.path.isfile(pdffile):
                    alt_pdffile = dirname+"/"+os.path.splitext(name)[0]+"."+options.suffix
                    if os.path.isfile(alt_pdffile):
                        os.rename(alt_pdffile, pdffile)

                # Check for the file again. This time, see whether its
                # modification time is newer than the original, if that option
                # is specified.
                if os.path.isfile(pdffile):
                    if options.time:
                        origtime = os.path.getmtime(dirname+"/"+name)
                        pdftime = os.path.getmtime(pdffile)

                        # If the PDF is newer than the origtime, the file is
                        # valid.
                        if pdftime > origtime:
                            is_invalid = False
                    else:
                        is_invalid = False

                # Neither the regular nor the alternative export file exists,
                # list this file.
                if is_invalid:
                    print dirname+"/"+name

                    if not pattern in counts:
                        counts[pattern] = 0

                    counts[pattern] += 1


def print_summary(counts):
    if len(counts) == 0:
        return

    print
    for key in sorted(counts):
        print str(counts[key]).rjust(4), key.ljust(10), patterns[key]


if __name__ == "__main__":
	main()
