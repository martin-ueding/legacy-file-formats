#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                   License                                   #
###############################################################################
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

"""
This script searches your files for file formats that might be unreadable in
the future. It will check whether there is a corresponding PDF exported, if
not, the file will be listed.

For some file types, it can automatically generate an export file. You can
specify your own file formats as well as how they can be exported.
"""

import optparse
import os
import sys

from legacylib import liblegacy

__docformat__ = "restructuredtext en"

def _parse_args():
    """
    Parses command line arguments.

    :return: Tuple with options and arguments.
    :rtype: tuple
    """
    parser = optparse.OptionParser(usage="%prog [paths...]", description="Checks for proprietary, rare or legacy file formats that do not have a PDF (or similarly standard) exported.")
    parser.add_option("--formats", dest="formats", action="store_true", default=False, help="Show known formats and exit.")
    parser.add_option("--make", dest="make", action="store_true", default=False, help="Uses makefile to generate export files.")
    parser.add_option("--rename", dest="rename", action="store_true", default=False, help="Rename file.pdf to file.old.pdf [default %default].")
    parser.add_option("--stat", dest="stat", action="store_true", default=False, help="Print file type summary. [default %default]")
    parser.add_option("--time", dest="time", action="store_true", default=False, help="Check that export is newer than other file. [default %default]")
    parser.add_option("-v", dest="verbose", action="store_true", default=False, help="Show renames (or would be renames). [default %default].")

    return parser.parse_args()


def main():
    (options, args) = _parse_args()

    if options.formats:
        liblegacy.show_formats()
        sys.exit(1)

    # If no directory was given on the command line, use the current working
    # directory.
    if len(args) == 0:
        args.append(".")

    counts = {}

    # Iterate through all given folders.
    for arg in args:
        if os.path.isdir(arg):
            os.path.walk(arg, liblegacy.checkfolder, (options, counts))

    # Print the summary if desired.
    if options.stat:
        liblegacy.print_summary(counts)


if __name__ == "__main__":
	main()
