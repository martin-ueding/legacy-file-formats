#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Ueding <dev@martin-ueding.de>

import optparse
import os
import sys

# Export format groups for various file types.
type_audio = ["mp3", "ogg", "flac"]
type_disk_image = ["iso", "zip"]
type_drawing = ["pdf", "svg", "eps", "ps"]
type_picture = ["png", "tiff", "tif", "bmp"]
type_presentation = ["pdf"]
type_tabular = ["pdf", "csv"]
type_text = ["pdf", "txt", "rtf", "markdown", "tex", "md"]
type_video = ["ogv", "avi", "mpg", "mp4"]

# Dict of file extensions that should be checked. The full name is for the
# stats output. The second element in the details tuple is a list of
# alternative file formats that satisfy the export as well.
patterns = {
    "cdr": ("Corel Draw", type_drawing),
    "dmg": ("Apple Disk Image", type_disk_image),
    "doc": ("Microsoft Word", type_text),
    "docx": ("Microsoft Word", type_text),
    "flv": ("Flash Video", type_video),
    "indd": ("Adobe InDesign", type_drawing),
    "key": ("Apple Keynote", type_presentation),
    "mindnode": ("Mindnode Mindmap", ["pdf"]),
    "mw": ("Maple Worksheet", ["pdf"]),
    "nb": ("Mathematica Notebook", ["pdf"]),
    "numbers": ("Apple Numbers", type_tabular),
    "odg": ("OpenOffice Draw", type_drawing),
    "odp": ("OpenOffice Impress", type_presentation),
    "ods": ("OpenOffice Calc", type_tabular),
    "odt": ("OpenOffice Writer", type_text),
    "pages": ("Apple Pages", type_text),
    "ppsx": ("Microsoft PowerPoint", type_presentation),
    "ppt": ("Microsoft PowerPoint", type_presentation),
    "ppts": ("Microsoft PowerPoint", type_presentation),
    "pptx": ("Microsoft PowerPoint", type_presentation),
    "psd": ("Adobe Photoshop", type_picture),
    "rtfd": ("Rich Text Format Directory", type_text),
    "webarchive": ("Safari Web Archive", ["pdf", "html"]),
    "wma": ("Windows Media Audio", type_audio),
    "wmv": ("Windows Media Video", type_video),
    "xcf": ("GIMP Picture", type_picture),
    "xls": ("Microsoft Excel", type_tabular),
    "xlsx": ("Microsoft Excel", type_tabular),
    "xoj": ("Xournal", type_drawing),
    "xpm": ("XPM Picture", type_picture),
}


def main():
    parser = optparse.OptionParser(usage="legacy [paths...]", description="Checks for proprietary, rare or legacy file formats that do not have a PDF (or similarly standard) exported.")
    parser.add_option("--stat", dest="stat", action="store_true", default=False, help="Print file type summary. [default %default]")
    parser.add_option("--time", dest="time", action="store_true", default=False, help="Check that export is newer than other file. [default %default]")
    parser.add_option("--formats", dest="formats", action="store_true", default=False, help="Show known formats and exit.")
    parser.add_option("--rename", dest="rename", action="store_true", default=False, help="Rename file.pdf to file.old.pdf [default %default].")

    (options, args) = parser.parse_args()
    del parser

    if options.formats:
        show_formats()
        sys.exit(1)

    # If no directory was given on the command line, use the current working
    # directory.
    if len(args) == 0:
        args.append(".")

    counts = {}

    # Iterate through all given folders.
    for arg in args:
        if os.path.isdir(arg):
            os.path.walk(arg, checkfolder, (options, counts))

    # Print the summary if desired.
    if options.stat:
        print_summary(counts)


def checkfolder(args, dirname, names):
    """
    Checks a folder for files that lack an export.

    In case `file.old` does not have a `file.old.pdf`, a `file.pdf` is checked
    alternatively. It the latter is found, it is moved to `file.old.pdf` to
    show that it is just an export of the original file, not a file on its own.
    """

    options, counts = args

    names.sort()

    # Iterate thorugh all the files and folders.
    for name in names:
        for pattern in patterns:
            if name.lower().endswith("."+pattern):
                is_invalid = True

                # Check whether a file exist with one of the allowed suffixes.
                for exportsuffix in patterns[pattern][1]:
                    # This is the standard export file name.
                    exportfile = dirname+"/"+name+"."+exportsuffix

                    # Check whether the file has the same name, but just a export
                    # extension.  Rename the file then.
                    if not os.path.isfile(exportfile):
                        alt_exportfile = dirname+"/"+os.path.splitext(name)[0]+"."+exportsuffix
                        if os.path.isfile(alt_exportfile) and options.rename:
                            os.rename(alt_exportfile, exportfile)

                    # Check for the file again. This time, see whether its
                    # modification time is newer than the original, if that option
                    # is specified.
                    if os.path.isfile(exportfile):
                        if options.time:
                            origtime = os.path.getmtime(dirname+"/"+name)
                            exporttime = os.path.getmtime(exportfile)

                            # If the export is newer than the origtime, the file is
                            # valid.
                            if exporttime > origtime:
                                is_invalid = False
                        else:
                            is_invalid = False

                if is_invalid:
                    print dirname+"/"+name

                    if not pattern in counts:
                        counts[pattern] = 0

                    counts[pattern] += 1


def print_summary(counts):
    if len(counts) == 0:
        return

    print
    for key in sorted(counts):
        print str(counts[key]).rjust(4), key.ljust(10), patterns[key][0]

def show_formats():
    print "Suffix".ljust(10), "Name".ljust(30), "Export Suffixes"
    print "------".ljust(10), "----".ljust(30), "---------------"

    for pattern in sorted(patterns):
        suffix = pattern
        name = patterns[pattern][0]
        exportsuffixes = patterns[pattern][1]

        print suffix.ljust(10), name.ljust(30), ', '.join(sorted(exportsuffixes))

if __name__ == "__main__":
	main()
